PORT=5000
MONGO_URI=mongodb://localhost:27017/real_estate

// server.js
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const bodyParser = require('body-parser');
const dotenv = require('dotenv');
const propertyRoutes = require('./routes/properties');

dotenv.config();

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(bodyParser.json());
app.use('/api/properties', propertyRoutes);

// Connect to MongoDB
mongoose.connect(process.env.MONGO_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
}).then(() => console.log('MongoDB connected'))
  .catch(err => console.log(err));

// Start server
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

// models/Property.js
const mongoose = require('mongoose');

const propertySchema = new mongoose.Schema({
    title: { type: String, required: true },
    description: { type: String, required: true },
    image: { type: String, required: true },
    contact: { type: String, required: true },
    price: { type: Number, required: true },
    reviews: [
        {
            user: String,
            rating: Number,
            comment: String,
        },
    ],
}, { timestamps: true });

const Property = mongoose.model('Property', propertySchema);

module.exports = Property;

// routes/properties.js
const express = require('express');
const router = express.Router();
const Property = require('../models/Property');

// Get all properties
router.get('/', async (req, res) => {
    try {
        const properties = await Property.find();
        res.json(properties);
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

// Add a new property
router.post('/', async (req, res) => {
    const { title, description, image, contact, price } = req.body;

    if (!title || !description || !image || !contact || !price) {
        return res.status(400).json({ message: "Incomplete property data" });
    }

    const newProperty = new Property({
        title,
        description,
        image,
        contact,
        price,
    });

    try {
        const savedProperty = await newProperty.save();
        res.status(201).json(savedProperty);
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

// Delete a property
router.delete('/:id', async (req, res) => {
    try {
        const property = await Property.findById(req.params.id);
        if (!property) {
            return res.status(404).json({ message: "Property not found" });
        }
        await property.remove();
        res.json({ message: "Property deleted" });
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

module.exports = router;

node server.js
